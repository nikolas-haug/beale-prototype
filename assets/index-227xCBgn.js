(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))i(a);new MutationObserver(a=>{for(const s of a)if(s.type==="childList")for(const n of s.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function e(a){const s={};return a.integrity&&(s.integrity=a.integrity),a.referrerPolicy&&(s.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?s.credentials="include":a.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(a){if(a.ep)return;a.ep=!0;const s=e(a);fetch(a.href,s)}})();class B{constructor(t,e){this.canvas=t,this.spectrogramCanvas=e,this.ctx=t.getContext("2d"),this.spectrogramCtx=e.getContext("2d"),this.audioCtx=null,this.analyser=null,this.source=null,this.isPlaying=!1,this.spectrogramData=[],this.maxSpectrogramLength=200,this.fftSize=2048,this.audioDuration=0,this.audioElement=null,this.dataArray=null,this.freqData=null,console.log("Initializing AudioProcessor with spectrogram:",{canvas:!!t,spectrogramCanvas:!!e}),this.canvas.width=this.canvas.offsetWidth,this.canvas.height=150,this.spectrogramCanvas.width=this.spectrogramCanvas.offsetWidth,this.spectrogramCanvas.height=150,window.addEventListener("resize",()=>{this.canvas.width=this.canvas.offsetWidth,this.spectrogramCanvas.width=this.spectrogramCanvas.offsetWidth,this.updateVisualizer()}),this.spectrogramGradient=this.createSpectrogramGradient(),this.analyzedUnits=[],this.unitThreshold=-70,this.minUnitDuration=.2,this.maxUnitDuration=2}createSpectrogramGradient(){const t=document.createElement("canvas");t.width=1,t.height=256;const e=t.getContext("2d"),i=e.createLinearGradient(0,0,0,256);return i.addColorStop(0,"#000060"),i.addColorStop(.5,"#00ff00"),i.addColorStop(.75,"#ffff00"),i.addColorStop(1,"#ff0000"),e.fillStyle=i,e.fillRect(0,0,1,256),e.getImageData(0,0,1,256).data}initialize(t){if(console.log("Initializing audio context and analyser"),this.audioElement=t,this.audioDuration=t.duration,this.audioCtx||(this.audioCtx=new(window.AudioContext||window.webkitAudioContext)),this.analyser||(this.analyser=this.audioCtx.createAnalyser(),this.analyser.fftSize=this.fftSize,this.analyser.minDecibels=-90,this.analyser.maxDecibels=-30,this.analyser.smoothingTimeConstant=.85,this.dataArray=new Uint8Array(this.analyser.frequencyBinCount),this.freqData=new Uint8Array(this.analyser.frequencyBinCount)),!this.source||this.source.mediaElement!==t){if(this.source)try{this.source.disconnect()}catch{console.log("No need to disconnect source")}try{this.source=this.audioCtx.createMediaElementSource(t),this.source.connect(this.analyser),this.analyser.connect(this.audioCtx.destination)}catch(e){if(console.log("Error connecting audio source:",e),e.name!=="InvalidStateError")throw e}}}updateVisualizer(){if(!this.isPlaying)return;requestAnimationFrame(()=>this.updateVisualizer()),(!this.dataArray||!this.freqData)&&(this.dataArray=new Uint8Array(this.analyser.frequencyBinCount),this.freqData=new Uint8Array(this.analyser.frequencyBinCount)),this.analyser.getByteFrequencyData(this.dataArray),this.updateSpectrogram(),this.ctx.fillStyle=getComputedStyle(document.documentElement).getPropertyValue("--primary-color"),this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);const t=this.canvas.width/this.dataArray.length*2.5;let e=0,i=0,a=0;for(let s=0;s<this.dataArray.length;s++){const n=this.dataArray[s];a+=n,n>this.dataArray[i]&&(i=s);const o=this.ctx.createLinearGradient(0,0,0,this.canvas.height);o.addColorStop(0,"#4a90e2"),o.addColorStop(1,"#1a3a4a"),this.ctx.fillStyle=o,this.ctx.fillRect(e,this.canvas.height-n/2,t,n/2),e+=t+1}return{peakFrequency:i*(this.audioCtx.sampleRate/2)/this.dataArray.length,averageVolume:a/this.dataArray.length}}updateSpectrogram(){if(!this.isPlaying||!this.freqData)return;this.analyser.getByteFrequencyData(this.freqData);const t=this.spectrogramCtx.getImageData(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height);this.spectrogramCtx.clearRect(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.spectrogramCtx.putImageData(t,1,0);const e=this.spectrogramCanvas.height/this.analyser.frequencyBinCount,i=this.spectrogramCtx.createImageData(1,this.spectrogramCanvas.height);for(let a=0;a<this.freqData.length;a++){const s=this.freqData[a],n=Math.floor(a*e),o=Math.floor(s/255*255),l=this.spectrogramGradient[o*4],m=this.spectrogramGradient[o*4+1],g=this.spectrogramGradient[o*4+2];for(let c=0;c<e&&n+c<this.spectrogramCanvas.height;c++){const u=(n+c)*4;i.data[u]=l,i.data[u+1]=m,i.data[u+2]=g,i.data[u+3]=255}}this.spectrogramCtx.putImageData(i,0,0),this.drawTimeMarker(),this.drawUnitMarkers()}drawTimeMarker(){if(!this.audioElement||!this.isPlaying)return;const e=this.audioElement.currentTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.strokeStyle="rgba(255, 255, 255, 0.5)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(e,0),this.spectrogramCtx.lineTo(e,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()}drawUnitMarkers(){!this.analyzedUnits||!this.analyzedUnits.length||this.analyzedUnits.forEach((t,e)=>{const i=t.startTime/this.audioDuration*this.spectrogramCanvas.width,a=t.endTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.fillStyle="rgba(0, 255, 0, 0.05)",this.spectrogramCtx.fillRect(i,0,a-i,this.spectrogramCanvas.height),this.spectrogramCtx.strokeStyle="rgba(0, 255, 0, 0.3)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(i,0),this.spectrogramCtx.lineTo(i,this.spectrogramCanvas.height),this.spectrogramCtx.moveTo(a,0),this.spectrogramCtx.lineTo(a,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()})}detectUnits(){const t=[];let e={start:0,end:0,data:[]},i=20;for(let a=0;a<this.spectrogramData.length;a++)this.spectrogramData[a].reduce((n,o)=>n+o,0)/this.spectrogramData[a].length>i?(e.start===0&&(e.start=a),e.data.push(this.spectrogramData[a])):e.start!==0&&(e.end=a,t.push(e),e={start:0,end:0,data:[]});return t}start(){this.isPlaying=!0,this.updateVisualizer()}stop(){this.isPlaying=!1}getAudioData(){if(!this.analyser||!this.dataArray)return null;this.analyser.getByteFrequencyData(this.dataArray);let t=0,e=0;for(let i=0;i<this.dataArray.length;i++)t+=this.dataArray[i],this.dataArray[i]>this.dataArray[e]&&(e=i);return{peakFrequency:e*(this.audioCtx.sampleRate/2)/this.dataArray.length,averageVolume:t/this.dataArray.length,units:this.detectUnits()}}async analyzeAudioFile(t){console.log("Analyzing audio file...");try{const e=await t.arrayBuffer(),i=new(window.AudioContext||window.webkitAudioContext),a=await i.decodeAudioData(e),s=i.createAnalyser();s.fftSize=this.fftSize,s.minDecibels=-90,s.maxDecibels=-30,s.smoothingTimeConstant=.8;const n=s.frequencyBinCount,o=this.fftSize,l=Math.ceil(a.length/o);console.log("Analysis parameters:",{fftSize:this.fftSize,bufferLength:n,totalSlices:l,duration:a.duration,sampleRate:a.sampleRate,channels:a.numberOfChannels,totalSamples:a.length});const m=a.getChannelData(0),g=new Float32Array(l*n);console.log("Starting slice processing...");const c=document.createElement("canvas");c.width=l,c.height=n;const u=c.getContext("2d");for(let h=0;h<l;h++){const p=h*o,S=Math.min(p+o,m.length)-p;let v=0;for(let r=0;r<S;r++)v=Math.max(v,Math.abs(m[p+r]));if(v<.01){for(let r=0;r<this.fftSize/2;r++)g[h*n+r]=-90;continue}const C=new OfflineAudioContext(1,this.fftSize,a.sampleRate),d=C.createAnalyser();d.fftSize=this.fftSize,d.minDecibels=-90,d.maxDecibels=-30,d.smoothingTimeConstant=0;const x=C.createBuffer(1,this.fftSize,a.sampleRate),y=x.getChannelData(0);for(let r=0;r<this.fftSize;r++)if(r<S){const I=.5*(1-Math.cos(2*Math.PI*r/S));y[r]=m[p+r]*I}else y[r]=0;const w=C.createBufferSource();w.buffer=x,w.connect(d),d.connect(C.destination);const F=new Promise((r,I)=>{C.oncomplete=M=>r(M.renderedBuffer),C.onerror=I});w.start(0),await C.startRendering(),await F;const f=new Float32Array(d.frequencyBinCount);d.getFloatFrequencyData(f);for(let r=0;r<d.frequencyBinCount;r++)g[h*n+r]=f[r];const T=u.createImageData(1,n);for(let r=0;r<n;r++){const M=(f[r]-d.minDecibels)/(d.maxDecibels-d.minDecibels),z=Math.max(0,Math.min(1,M)),D=Math.floor(z*255),k=this.spectrogramGradient[D*4],P=this.spectrogramGradient[D*4+1],E=this.spectrogramGradient[D*4+2],L=(n-1-r)*4;T.data[L]=k,T.data[L+1]=P,T.data[L+2]=E,T.data[L+3]=255}u.putImageData(T,h,0),h%100===0&&console.log(`Processing slice ${h}/${l}`,{timeOffset:h*o/a.sampleRate,maxAmplitude:v,sampleFreqData:f.slice(0,5),minValue:Math.min(...f),maxValue:Math.max(...f),avgValue:f.reduce((r,I)=>r+I,0)/f.length})}return console.log("Finished processing all slices"),this.fullSpectrogramData=g,this.fullSpectrogramImage=c,this.analyzedUnits=this.detectUnitsFromSpectrogram(g,a.sampleRate,o),console.log("Analysis complete:",{unitsFound:this.analyzedUnits.length,totalSlices:l,spectrogramWidth:c.width,spectrogramHeight:c.height}),this.renderFullSpectrogram(),{units:this.analyzedUnits,duration:a.duration,sampleRate:a.sampleRate}}catch(e){throw console.error("Error analyzing audio file:",e),e}}renderFullSpectrogram(){this.spectrogramCtx.clearRect(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.spectrogramCtx.drawImage(this.fullSpectrogramImage,0,0,this.fullSpectrogramImage.width,this.fullSpectrogramImage.height,0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.analyzedUnits&&this.drawUnitMarkers(),this.isPlaying&&this.audioElement&&this.drawTimeMarker()}updateSpectrogram(){this.fullSpectrogramImage&&this.renderFullSpectrogram()}drawTimeMarker(){if(!this.audioElement)return;const e=this.audioElement.currentTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.strokeStyle="rgba(255, 255, 255, 0.8)",this.spectrogramCtx.lineWidth=2,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(e,0),this.spectrogramCtx.lineTo(e,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()}drawUnitMarkers(){this.analyzedUnits&&this.analyzedUnits.forEach((t,e)=>{const i=t.startTime/this.audioDuration*this.spectrogramCanvas.width,a=t.endTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.fillStyle="rgba(0, 255, 0, 0.1)",this.spectrogramCtx.fillRect(i,0,a-i,this.spectrogramCanvas.height),this.spectrogramCtx.strokeStyle="rgba(0, 255, 0, 0.5)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(i,0),this.spectrogramCtx.lineTo(i,this.spectrogramCanvas.height),this.spectrogramCtx.moveTo(a,0),this.spectrogramCtx.lineTo(a,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()})}detectUnitsFromSpectrogram(t,e,i){const a=[];let s=null;const n=this.fftSize/2,o=Math.floor(50*this.fftSize/e),l=Math.floor(4e3*this.fftSize/e),m=-70;this.minUnitDuration=.1,console.log("Unit detection parameters:",{minBin:o,maxBin:l,sampleRate:e,samplesPerSlice:i,totalSlices:t.length/n,baseThreshold:m,minDuration:this.minUnitDuration});let g=0,c=[],u=0;for(let d=0;d<t.length/n;d++){const x=d*n,y=t.slice(x+o,x+l),w=y.reduce((F,f)=>F+f,0)/y.length;g+=w,c.push(w),u++}const h=g/u,p=c.reduce((d,x)=>{const y=x-h;return d+y*y},0)/u,A=Math.sqrt(p);console.log("Signal statistics:",{averageIntensity:h,stdDev:A,maxIntensity:Math.max(...c),minIntensity:Math.min(...c)});const S=Math.max(m,h+2*A);console.log("Using adaptive threshold:",S);let v=0;const C=Math.ceil(this.minUnitDuration*e/i);for(let d=0;d<t.length/n;d++){const x=d*n,y=d*(i/e),w=t.slice(x+o,x+l),F=w.reduce((f,T)=>f+T,0)/w.length;if(d%100===0&&console.log(`Frame ${d}:`,{avgIntensity:F,threshold:S,timestamp:y,consecutiveFrames:v,minConsecutiveFrames:C}),F>S){v++,s||(console.log(`Potential unit start at ${y}s with intensity ${F}dB`),s={startTime:y,endTime:y,peakFrequencies:[],avgIntensity:[],spectrogramSlices:[]}),s.endTime=y;const f=t.slice(x,x+n);s.spectrogramSlices.push(Array.from(f));let T=0,r=w[0];for(let M=1;M<w.length;M++)w[M]>r&&(r=w[M],T=M);const I=50+T*e/this.fftSize;s.peakFrequencies.push(I),s.avgIntensity.push(F)}else{if(s&&v>=C){const f=s.endTime-s.startTime;s.dominantFrequency=this.calculateDominantFrequency(s.peakFrequencies),s.averageIntensity=s.avgIntensity.reduce((T,r)=>T+r)/s.avgIntensity.length,s.duration=f,console.log("Found unit:",{startTime:s.startTime,endTime:s.endTime,duration:f,dominantFreq:s.dominantFrequency,avgIntensity:s.averageIntensity,consecutiveFrames:v}),a.push(s)}s=null,v=0}}if(s&&v>=C){const d=s.endTime-s.startTime;s.dominantFrequency=this.calculateDominantFrequency(s.peakFrequencies),s.averageIntensity=s.avgIntensity.reduce((x,y)=>x+y)/s.avgIntensity.length,s.duration=d,a.push(s)}return a}findPeakFrequency(t,e){let i=0,a=t[0];for(let n=1;n<t.length;n++)t[n]>a&&(a=t[n],i=n);const s=e/(this.fftSize*2);return 100+i*s}calculateDominantFrequency(t){const e=new Map;let i=0,a=t[0];return t.forEach(s=>{const n=Math.round(s/10)*10,o=(e.get(n)||0)+1;e.set(n,o),o>i&&(i=o,a=n)}),a}}const R=["Narael","Vorrin","Selkai","Drumeth","Olaan","Caelo","Taruin","Fenja","Erelas","Halun","Mireth","Soruun","Zhal","Yunel","Praxo","Elarin","Maithe","Koruun","Thalas","Veyra","Oshen","Branu","Serel","Numor","Tivrel","Ulaith","Auvor","Jaanor","Yareth","Zeviel","Nauran","Toriel","Ruuneth","Ethex","Orrik","Marnis","Kelai","Vareth","Sunil","Talek","Gareth","Ovrin","Inaril","Varnok","Quorin","Selyn","Aeluin","Velor","Nyral","Braxin","Thera","Zirrel","Omaya","Fynar","Lureth","Haroen","Durell","Siroth","Tanor"],U={names:R},q=["Raeth's Deep","The Shattered Reef","Olaan's Cry","Caelo's Rise","Narael's Fall","The Black Shoal","Driftwater","Ghost Trench","Tranquil Hollow","Thermal Bastion","The Murkveil","Zunari Shelf","Cradle of Salt","Whalebone Crossing","The Azure Scar","Lament Ridge","Deep Echo Rift","Farsea Ridge","Bloodwater Drop","Spire of Moan","Grief Shoals","Hollow Spiral","The Hushed Arc","Midnight Bloom","Whisper Maw","Breach Horizon","Kelpath's Ring","Songdrift","Teardrop Caldera","Crysal Verge","Tectus Hollow","Nai'mur Vents","The Broken Halo","Noonfall","Rapture Step","Mariana Echo","Bikini Silence","Tongue of Fire","Sable Curtain","Driftmark Deep","Nightwake Trench","Sorrow Basin","Singing Spiral","Echo Plateau","Narcondam Reach","Minamitorishima Verge","Point Nemo","The Rim of Stillness","Krakatoa’s Shadow","Darwin Rise","Challenger Deep","Revillagigedo Hollow","Kermadec Path","Haida Crossing"],N={locations:q},O=["his fluke low","her call fading","at dawn","when the current turned","as silence fell","beneath the storm","in mourning","in remembering","his song unanswered","her pulse bright","in the long drift","as light broke","when warmth returned","his breach wild","with the old ache","with new hope","in spiral motion","as moons rose","while circling young","when silence ruled","his song full","in echoing sorrow","in stillness","while the rift sang","at cold edge","her joy known","his echo cast","with faded rhythm","with great weight","with sharp fear","as kelp danced","when the hunters came","with grief low","in calling pain","at season's end","in circling doubt","when ice cracked","beneath the breach","in spiral trance","with steady hope","her call mourning","when the reef broke","while old songs rose","at driftfall","under the moon ring","when light turned cold","in love unspoken","as tides turned red","with rage hidden","with deep longing","in ghost motion","her call unanswered"],H={actions:O},V=["grief","joy","mourning","remembrance","curiosity","fear","reverence","hope","loneliness","bonding","longing","peace","rage","confusion","awakening","loss","guidance","protection","anticipation","gratitude","memory-echo","pain-resonance","migration-calling","echo-love","ancestral-memory"],$={emotions:V},W=["The Breach of Twelve","Great Silence of the Reef","The Long Mourn","Sundering at Ghost Trench","Rift Convergence","The Fifth Moon Cry","Flight of the Young","The Swell Reversal","Call of Narael","Fall of Olaan","Tide of Sorrow","The Last Spiral","Meeting of the Three Currents","The Shadowed Bloom","Drift of the Ancients","Loss of Fenja","Rejoining at Driftwater","Echo of the Core","The Quiet Turning","The Coral Memory","Vanishing Pulse","Orrik’s Song","Birth of Caelo's Path","The Stormed Rising"],G={events:W},j=["modulated triadic burst","harmonic pair echo","frequency stair-step","subharmonic ripple","ascending motif cluster","repeat phase fragment","binary alternation","drift modulation loop","octave bleed cycle","wavefront saturation","pulse-stack anomaly","harmonic drift window","carrier tone deviation","multi-node pulse train","compressed whistle group","fragmented tone escalation","inversion symmetry","choral descent overlay","pulse-lag triad","mirror-bound sequence","wavelocked fragment echo","resonance taper","refracted pulse burst","tonal bridge anomaly","folded motif recursion","glissando collapse","staggered note phase","nested resonance packet","harmonic mirror slope","linear decay train","two-tone braided loop","ultramodular collapse","chime-echo fold","decaying spiral harmonic","radial loop burst","strobing inflection wave","ringed tone collapse","cropped segment drift","fractal harmonic ladder","interval contraction","overtone masking cluster","recursive phase imprint","soft-tone ladder ascent","tilted modulation peak","angular glide sequence","transposition ghost","intra-band oscillation","filtered microburst","harmonic bloom tail","tonal stutter pattern"],_={patterns:j},X=["SIG-TRI-A9","PNC-LD-74","RPT-HR-02","WFM-CN-33","MDF-BR-18","TNS-MOD-67","RHY-SEQ-15","INV-SY-48","CMP-HRZ-21","CHT-N2-08","FRM-LP-36","DSN-HM-42","FLX-ALT-19","RPT-FRM-77","SQR-PUL-50","INF-DV-26","DCH-RW-81","SLR-BZ-06","TRN-PH-14","NXM-WV-11","DFT-BR-29","SRF-RM-91","CNF-ZT-44","OSC-GH-59","MCH-PT-73","LTD-SK-25","BLM-KT-62","FXD-NW-31","ANM-DR-39","PSL-QT-85","CHR-DL-66","ZNL-FM-93","PHZ-RT-04","CST-LD-28","MLT-RG-90","WAV-CB-57","TMP-VX-17","JMP-BT-12","SRC-WK-46","BLD-QS-20","TXL-KG-61","HRM-CX-03","DPL-BZ-79","NXT-SN-45","VRB-FQ-35","MTR-HC-30","TNL-PM-88","PUL-VX-16","EXP-ZN-60","ATM-WM-27"],J={segments:X},Z=["signal-to-noise ratio: high","signal-to-noise ratio: low","repetition confidence: medium","carrier bandwidth: wide","carrier bandwidth: narrow","harmonic consistency: low","harmonic consistency: high","signal entropy: increasing","signal entropy: decreasing","data density: sparse","data density: dense","pattern coherence: strong","pattern coherence: weak","noise floor interference","carrier dropout detected","envelope mismatch","chirp-to-pulse ratio: 3.2","chirp-to-pulse ratio: 1.1","low-frequency bleed present","pulse drift < 2%","pulse drift > 10%","clipping artifact suspected","normalized tone regression","phase cancellation observed","harmonic bleed-through","loudness crest factor: unstable","attack/decay window mismatch","transient stack anomaly","inverse modulation signature","multipath interference","signal packet loss","bitrate anomaly: constant","frame-lock failed","time base desync","frequency bloom: 12%","rhythmic sync: partial","tonal dropout 4.8s","subchannel deviation","dynamic range overflow","spectral fold-in detected","click-train boundary unresolved","data confidence: 73%","repeating node sync: stable","wave collapse threshold met","gain envelope spike","emission slope flattening","carrier detune marginal","frequency shadow present","harmonic leakage: right channel"],K={signal_flags:Z};class Q{constructor(){this.names=U.names,this.locations=N.locations,this.actions=H.actions,this.emotions=$.emotions,this.events=G.events,this.patterns=_.patterns,this.segments=J.segments,this.signalFlags=K.signal_flags,this.templates=["{name}, at {location}, {action}","During {event}, {name} at {location} {action}","{name} remembers {event} at {location}, {action}","At {location}, {event} echoes in {name}'s {emotion}","{name}, at {location}, with {emotion}, {action}","In {location}, {name} felt {emotion} during {event}","With {emotion}, {name} {action} at {location}","{name}'s {action} at {location}, under the shadow of {event}","As {event} unfolds, {name} {action} with {emotion}","{event} at {location}","{name}, {emotion}","{name} and {name2}, {action}, {emotion}"],this.analystTemplates=["Segment {segment}: {pattern} detected","{pattern} in {segment}, {signal_flag}","{segment} analysis: {pattern} with {signal_flag}","{signal_flag} during {pattern}","{segment} shows {pattern}, {signal_flag}","{pattern} → {segment} → {signal_flag}","{segment} {pattern} {signal_flag}","{pattern}","{segment}","{signal_flag}"]}pick(t,e=[]){const i=t.filter(a=>!e.includes(a));return i[Math.floor(Math.random()*i.length)]}getToneTag(t){return t>600?"high voice":t<200?"deep echo":"steady tone"}getMoodTag(t){return t>100?"with grief":t<30?"with peace":"with memory"}getAnalystAction(t,e){const i=["pattern detected","sequence complete","signal analyzed","data processed","transmission received"];return this.pick(i)}generatePhrase(t,e,i,a="emotionalist"){return a==="analyst"?this.generateAnalystPhrase(t,e,i):this.generateEmotionalistPhrase(t,e,i)}generateEmotionalistPhrase(t,e,i){const a=this.pick(this.templates),s=this.pick(this.names);let n=this.pick(this.names,[s]);const o=this.pick(this.locations),l=this.pick(this.actions),m=this.pick(this.emotions),g=this.pick(this.events),c={name:s,name2:n,location:o,action:l,emotion:m,event:g};let u=a.replace(/\{(\w+)\}/g,(h,p)=>c[p]||"");return u+=` [${Math.round(i)}s]`,u}generateAnalystPhrase(t,e,i){const a=this.pick(this.analystTemplates),s=this.pick(this.patterns),n=this.pick(this.segments),o=this.pick(this.signalFlags);let l=a.replace("{pattern}",s).replace("{segment}",n).replace("{signal_flag}",o);return l+=` [${Math.round(i)}s]`,l}}class Y{constructor(t){this.logList=t,this.phrases=JSON.parse(localStorage.getItem("bealePhrases")||"[]"),this.renderLog()}addPhrase(t){this.phrases.push({text:t,timestamp:new Date().toISOString()}),this.saveToStorage(),this.renderLog()}clearLog(){this.phrases=[],this.saveToStorage(),this.renderLog()}copyToClipboard(){const t=this.phrases.map(e=>e.text).join(`
`);navigator.clipboard.writeText(t)}exportAsTxt(){const t=this.phrases.map(e=>e.text).join(`
`);this.downloadFile(t,"beale-log.txt","text/plain")}exportAsJson(){const t=JSON.stringify(this.phrases,null,2);this.downloadFile(t,"beale-log.json","application/json")}downloadFile(t,e,i){const a=new Blob([t],{type:i}),s=URL.createObjectURL(a),n=document.createElement("a");n.href=s,n.download=e,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(s)}saveToStorage(){localStorage.setItem("bealePhrases",JSON.stringify(this.phrases))}renderLog(){this.logList.innerHTML="",this.phrases.forEach(t=>{const e=document.createElement("li");e.textContent=t.text,this.logList.appendChild(e)})}}const tt=[{id:"sample1",title:"Humpback Whale Song - Pacific Ocean",description:"A classic humpback whale song recorded in the Pacific Ocean",filename:"humpback_whale_sound_pdb.mp3",duration:"4.07",source:"TBD"},{id:"sample2",title:"Humpback Whale Song - Hawaii",description:"A humpback whale song recorded by the Jupiter team in Hawaii",filename:"humpback_hawaii_jupiter_1.mp3",duration:"2.47",source:"TBD"},{id:"sample3",title:"Humpback Whale Song - NOAA",description:"A humpback whale song, NOAA Sounds of the Sea Project",filename:"noaa_humpback_whale_1.mp3",duration:".47",source:"TBD"}],et={audioFiles:tt};class it{constructor(t,e){this.audioFiles=et.audioFiles,this.select=document.getElementById("audioLibrary"),this.audioElement=document.getElementById("audio"),this.descriptionDiv=document.getElementById("audioDescription"),this.analyzeBtn=document.getElementById("analyzeLibraryAudio"),this.onAnalyzeLibraryAudio=t,this.onAudioLoaded=e,this.selectedFile=null,this.initializeLibrary()}initializeLibrary(){this.audioFiles.forEach(t=>{const e=document.createElement("option");e.value=t.filename,e.textContent=`${t.title} (${t.duration})`,this.select.appendChild(e)}),this.select.addEventListener("change",t=>{const e=this.audioFiles.find(i=>i.filename===t.target.value);e?(this.selectedFile=e,this.loadAudioFile(e.filename),this.descriptionDiv.innerHTML=`<strong>Description:</strong> ${e.description}<br><strong>Source:</strong> ${e.source}`,this.analyzeBtn.disabled=!1,this.analyzeBtn.classList.add("show"),this.onAudioLoaded&&this.onAudioLoaded()):(this.selectedFile=null,this.descriptionDiv.innerHTML="",this.analyzeBtn.disabled=!0,this.analyzeBtn.classList.remove("show"),this.onAudioLoaded&&this.onAudioLoaded(!1))}),this.analyzeBtn.addEventListener("click",()=>{this.selectedFile&&this.onAnalyzeLibraryAudio&&this.onAnalyzeLibraryAudio(this.selectedFile)})}loadAudioFile(t){const e=`audio/${t}`;this.audioElement.src=e,this.audioElement.load()}getCurrentAudio(){return this.audioElement}}class at{constructor(){console.log("Initializing BEALELite..."),this.audioFile=document.getElementById("audioFile"),this.audio=document.getElementById("audio"),this.canvas=document.getElementById("visualizer"),this.spectrogramCanvas=document.getElementById("spectrogram"),this.phraseOutput=document.getElementById("phrase"),this.logList=document.getElementById("logList"),this.emotionalistMode=document.getElementById("emotionalistMode"),this.analystMode=document.getElementById("analystMode"),this.copyLog=document.getElementById("copyLog"),this.exportTxt=document.getElementById("exportTxt"),this.exportJson=document.getElementById("exportJson"),this.clearLog=document.getElementById("clearLog"),this.customPlayBtn=document.getElementById("customPlay"),this.playIcon=document.getElementById("playIcon"),this.pauseIcon=document.getElementById("pauseIcon"),this.audioStatus=document.getElementById("audioStatus"),this.audioProgressBar=document.getElementById("audioProgressBar"),this.audioProgress=document.getElementById("audioProgress"),this.audioCurrentTime=document.getElementById("audioCurrentTime"),this.audioDuration=document.getElementById("audioDuration"),this.customAudioInterface=document.querySelector(".custom-audio-interface"),this.hazyModeNote=document.getElementById("hazyModeNote"),this.unitIndex=0,this.lastUnitTime=0,this.nextPhraseTime=0,this.wasHazyMode=!1,console.log("DOM elements initialized:",{audioFile:!!this.audioFile,audio:!!this.audio,canvas:!!this.canvas,spectrogramCanvas:!!this.spectrogramCanvas}),this.audioProcessor=new B(this.canvas,this.spectrogramCanvas),this.phraseGenerator=new Q,this.logManager=new Y(this.logList),this.currentMode="emotionalist",this.lastLoggedTime=0,this.logInterval=4,this.isAudioInitialized=!1,this.analyzedUnits=[],this.bindEvents()}bindEvents(){console.log("Binding events..."),this.audioFile.addEventListener("change",async t=>{console.log("File selected, handling file select..."),await this.handleFileSelect(t)}),this.audio.addEventListener("play",()=>{console.log("Audio playback started..."),this.isAudioInitialized||(console.log("Initializing audio processor..."),this.audioProcessor.initialize(this.audio),this.isAudioInitialized=!0),this.audioProcessor.start(),this.lastLoggedTime=0,this.playIcon.style.display="none",this.pauseIcon.style.display=""}),this.audio.addEventListener("pause",()=>{console.log("Audio paused, stopping audio processor..."),this.audioProcessor.stop(),this.playIcon.style.display="",this.pauseIcon.style.display="none"}),this.emotionalistMode.addEventListener("click",()=>this.setMode("emotionalist")),this.analystMode.addEventListener("click",()=>this.setMode("analyst")),this.copyLog.addEventListener("click",()=>this.logManager.copyToClipboard()),this.exportTxt.addEventListener("click",()=>this.logManager.exportAsTxt()),this.exportJson.addEventListener("click",()=>this.logManager.exportAsJson()),this.clearLog.addEventListener("click",()=>this.logManager.clearLog()),this.customPlayBtn.addEventListener("click",()=>{this.audio.src&&!this.customPlayBtn.disabled&&(this.audio.paused?this.audio.play():this.audio.pause())}),requestAnimationFrame(()=>this.update()),this.audio.addEventListener("timeupdate",()=>{this.updateAudioProgress()}),this.audio.addEventListener("loadedmetadata",()=>{this.updateAudioProgress()}),this.audioProgressBar.addEventListener("click",t=>{const e=this.audioProgressBar.getBoundingClientRect(),a=(t.clientX-e.left)/e.width;isNaN(this.audio.duration)||(this.audio.currentTime=a*this.audio.duration)})}async handleFileSelect(t){console.log("Handling file select...");const e=t.target.files[0];if(!e){console.log("No file selected"),this.setAudioLoadedState(!1);return}console.log("File selected:",e.name);try{this.phraseOutput.textContent="Analyzing audio file",this.phraseOutput.classList.add("loading-text");const i=await this.audioProcessor.analyzeAudioFile(e);this.analyzedUnits=i.units,this.unitIndex=0,this.lastUnitTime=0,this.nextPhraseTime=0,this.phraseOutput.classList.remove("loading-text"),console.log("Analysis results:",{numberOfUnits:this.analyzedUnits.length,duration:i.duration,sampleRate:i.sampleRate}),this.logManager.addPhrase(`Found ${this.analyzedUnits.length} distinct units in the audio file (${i.duration.toFixed(2)} seconds):`),this.analyzedUnits.forEach((n,o)=>{const l=n.startTime.toFixed(2),m=n.endTime.toFixed(2),g=n.duration.toFixed(2),c=n.dominantFrequency.toFixed(0),u=n.averageIntensity.toFixed(1),h=[`Unit ${o+1}:`,`  Time: ${l}s to ${m}s (duration: ${g}s)`,`  Dominant Frequency: ${c} Hz`,`  Average Intensity: ${u} dB`,`  Peak Frequencies Range: ${Math.min(...n.peakFrequencies).toFixed(0)}Hz - ${Math.max(...n.peakFrequencies).toFixed(0)}Hz`].join(`
`);this.logManager.addPhrase(h)});const a=URL.createObjectURL(e);this.audio.src=a,this.isAudioInitialized=!1,this.phraseOutput.textContent="Analysis complete - Ready to play";const s=document.getElementById("unit-view");if(s&&s.remove(),i.units&&i.units.length>0){const n=this.createUnitView(i.units);document.querySelector(".container").appendChild(n)}this.setAudioLoadedState(!0)}catch(i){console.error("Error analyzing file:",i),this.phraseOutput.textContent="Error analyzing audio file"}}setMode(t){if(this.currentMode=t,this.emotionalistMode.classList.toggle("active",t==="emotionalist"),this.analystMode.classList.toggle("active",t==="analyst"),t==="analyst"?(this.phraseOutput.classList.add("analyst-mode"),this.phraseOutput.classList.remove("emotionalist-mode"),this.hazyModeNote&&(this.hazyModeNote.textContent="Analyst Mode: Technical interpretation of audio patterns and signals")):(this.phraseOutput.classList.add("emotionalist-mode"),this.phraseOutput.classList.remove("analyst-mode"),this.hazyModeNote&&(this.hazyModeNote.textContent="Emotionalist Mode: Poetic interpretation of whale song")),this.audioProcessor.isPlaying){const e=this.audioProcessor.getAudioData();if(e){const i=this.phraseGenerator.generatePhrase(e.peakFrequency,e.averageVolume,this.audio.currentTime,t);this.phraseOutput.textContent=i,this.logManager.addPhrase(`[Mode Switch] ${i}`)}}}update(){if(requestAnimationFrame(()=>this.update()),!this.audioProcessor.isPlaying)return;const t=this.audioProcessor.getAudioData();if(!t)return;const e=this.audio.currentTime,i=this.analyzedUnits&&this.analyzedUnits.length>0?this.analyzedUnits:null;if(i){if(this.wasHazyMode&&this.hazyModeNote?(this.hazyModeNote.textContent="Units detected: Interpretation is now synchronized to song structure.",this.hazyModeNote.style.display="",setTimeout(()=>{this.hazyModeNote.textContent.startsWith("Units detected")&&(this.hazyModeNote.style.display="none")},3500)):this.hazyModeNote&&!this.hazyModeNote.textContent.startsWith("Units detected")&&(this.hazyModeNote.style.display="none"),this.wasHazyMode=!1,this.unitIndex<i.length&&e>=i[this.unitIndex].startTime){const a=this.phraseGenerator.generatePhrase(t.peakFrequency,t.averageVolume,e,this.currentMode);this.phraseOutput.textContent=a,this.logManager.addPhrase(a),this.lastUnitTime=e,this.unitIndex++}e<this.lastUnitTime&&(this.unitIndex=0)}else{this.hazyModeNote&&(this.hazyModeNote.textContent="Hazy Mode: No clear units detected—interpretation is experimental",this.hazyModeNote.style.display=""),this.wasHazyMode=!0;const a=2,s=6,n=t.averageVolume||0,o=s-n/255*(s-a);if(e>=this.nextPhraseTime){const l=this.phraseGenerator.generatePhrase(t.peakFrequency,t.averageVolume,e,this.currentMode);this.phraseOutput.textContent=l,this.logManager.addPhrase(l),this.nextPhraseTime=e+o}}}createUnitView(t){const e=document.createElement("div");e.id="unit-view",e.style.cssText=`
      margin-top: 20px;
      padding: 20px;
      background: var(--secondary-bg);
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    `;const i=document.createElement("h2");i.textContent="Detected Units",i.style.marginBottom="15px",e.appendChild(i);const a=document.createElement("div");return a.style.cssText=`
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
    `,t.forEach((s,n)=>{const o=document.createElement("div");o.className="unit-card",o.style.cssText=`
        padding: 15px;
        background: var(--primary-bg);
        border-radius: 6px;
        border: 1px solid var(--border-color);
      `;const l=document.createElement("h3");l.textContent=`Unit ${n+1}`,l.style.marginBottom="10px";const m=document.createElement("canvas");m.width=280,m.height=80,m.style.cssText=`
        width: 100%;
        height: 80px;
        background: #000;
        border-radius: 4px;
        margin-bottom: 10px;
      `,this.drawUnitSpectrogram(m,s);const g=document.createElement("div");g.innerHTML=`
        <div style="margin-bottom: 8px;">
          <strong>Time Range:</strong> ${s.startTime.toFixed(2)}s - ${s.endTime.toFixed(2)}s
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Duration:</strong> ${s.duration.toFixed(2)}s
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Dominant Frequency:</strong> ${s.dominantFrequency.toFixed(1)} Hz
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Average Intensity:</strong> ${s.averageIntensity.toFixed(1)} dB
        </div>
      `;const c=document.createElement("button");c.textContent="Play Unit",c.style.cssText=`
        background: var(--accent-color);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        width: 100%;
        position: relative;
        overflow: hidden;
      `;const u=document.createElement("div");u.style.cssText=`
        position: absolute;
        left: 0;
        bottom: 0;
        height: 2px;
        width: 0%;
        background: rgba(255, 255, 255, 0.5);
        transition: width 0.1s linear;
      `,c.appendChild(u);let h=!1;c.onclick=()=>{const p=document.querySelector("audio");if(p)if(h)p.pause(),c.textContent="Play Unit",u.style.width="0%",h=!1;else{p.currentTime=s.startTime,p.play(),c.textContent="Stop",h=!0;const A=()=>{if(!h)return;const S=(p.currentTime-s.startTime)/s.duration*100;u.style.width=`${Math.min(100,S)}%`,p.currentTime<s.startTime+s.duration&&h?requestAnimationFrame(A):(h=!1,c.textContent="Play Unit",u.style.width="0%")};A(),setTimeout(()=>{h&&(p.pause(),c.textContent="Play Unit",u.style.width="0%",h=!1)},s.duration*1e3)}},o.appendChild(l),o.appendChild(m),o.appendChild(g),o.appendChild(c),a.appendChild(o)}),e.appendChild(a),e}drawUnitSpectrogram(t,e){const i=t.getContext("2d"),a=e.spectrogramSlices;if(!a||a.length===0)return;const s=t.width/a.length,n=t.height;i.clearRect(0,0,t.width,t.height);let o=1/0,l=-1/0;a.forEach(m=>{m.forEach(g=>{o=Math.min(o,g),l=Math.max(l,g)})}),isFinite(o)||(o=-90),isFinite(l)||(l=-30),a.forEach((m,g)=>{const c=g*s;m.forEach((u,h)=>{const p=(u-o)/(l-o),A=n*(h/m.length),S=n/m.length,v=Math.floor(p*255),C=this.getSpectrogramColor(v);i.fillStyle=C,i.fillRect(c,n-A,s,-S)})})}getSpectrogramColor(t){return t<64?`rgb(0, 0, ${Math.floor(t*4)})`:t<128?`rgb(0, ${Math.floor((t-64)*4)}, 255)`:t<192?`rgb(${Math.floor((t-128)*4)}, 255, ${Math.floor(255-(t-128)*4)})`:`rgb(255, ${Math.floor(255-(t-192)*4)}, 0)`}setAudioLoadedState(t){t?(this.audio.pause(),this.audio.currentTime=0,this.customPlayBtn.disabled=!1,this.playIcon.style.display="",this.pauseIcon.style.display="none",this.audioStatus.textContent="",this.customAudioInterface.classList.add("audio-loaded")):(this.audio.pause(),this.audio.currentTime=0,this.customPlayBtn.disabled=!0,this.playIcon.style.display="",this.pauseIcon.style.display="none",this.audioStatus.textContent="No audio loaded. Please select or upload a track.",this.customAudioInterface.classList.remove("audio-loaded"))}async analyzeLibraryAudio(t){try{this.phraseOutput.textContent="Analyzing audio file",this.phraseOutput.classList.add("loading-text");const i=await(await fetch(`audio/${t.filename}`)).blob(),a=new File([i],t.filename,{type:i.type});await this.handleFileSelect({target:{files:[a]}}),this.unitIndex=0,this.lastUnitTime=0,this.nextPhraseTime=0}catch(e){this.phraseOutput.textContent="Error analyzing audio file",console.error("Error analyzing library audio:",e)}}updateAudioProgress(){const t=this.audio.duration||0,e=this.audio.currentTime||0,i=t?e/t*100:0;this.audioProgress.style.width=i+"%",this.audioCurrentTime.textContent=this.formatTime(e),this.audioDuration.textContent=this.formatTime(t)}formatTime(t){if(isNaN(t))return"0:00";const e=Math.floor(t/60),i=Math.floor(t%60);return`${e}:${i.toString().padStart(2,"0")}`}}document.addEventListener("DOMContentLoaded",()=>{let b;new it(t=>{b&&b.analyzeLibraryAudio(t)},(t=!0)=>{b&&b.setAudioLoadedState(t)}),b=new at});
