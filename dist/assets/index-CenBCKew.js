(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const n of i.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&a(n)}).observe(document,{childList:!0,subtree:!0});function e(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(s){if(s.ep)return;s.ep=!0;const i=e(s);fetch(s.href,i)}})();class P{constructor(t,e){this.canvas=t,this.spectrogramCanvas=e,this.ctx=t.getContext("2d"),this.spectrogramCtx=e.getContext("2d"),this.audioCtx=null,this.analyser=null,this.source=null,this.isPlaying=!1,this.spectrogramData=[],this.maxSpectrogramLength=200,this.fftSize=2048,this.audioDuration=0,this.audioElement=null,this.dataArray=null,this.freqData=null,console.log("Initializing AudioProcessor with spectrogram:",{canvas:!!t,spectrogramCanvas:!!e}),this.canvas.width=this.canvas.offsetWidth,this.canvas.height=150,this.spectrogramCanvas.width=this.spectrogramCanvas.offsetWidth,this.spectrogramCanvas.height=150,window.addEventListener("resize",()=>{this.canvas.width=this.canvas.offsetWidth,this.spectrogramCanvas.width=this.spectrogramCanvas.offsetWidth,this.updateVisualizer()}),this.spectrogramGradient=this.createSpectrogramGradient(),this.analyzedUnits=[],this.unitThreshold=-70,this.minUnitDuration=.2,this.maxUnitDuration=2}createSpectrogramGradient(){const t=document.createElement("canvas");t.width=1,t.height=256;const e=t.getContext("2d"),a=e.createLinearGradient(0,0,0,256);return a.addColorStop(0,"#000060"),a.addColorStop(.5,"#00ff00"),a.addColorStop(.75,"#ffff00"),a.addColorStop(1,"#ff0000"),e.fillStyle=a,e.fillRect(0,0,1,256),e.getImageData(0,0,1,256).data}initialize(t){if(console.log("Initializing audio context and analyser"),this.audioElement=t,this.audioDuration=t.duration,this.audioCtx||(this.audioCtx=new(window.AudioContext||window.webkitAudioContext)),this.analyser||(this.analyser=this.audioCtx.createAnalyser(),this.analyser.fftSize=this.fftSize,this.analyser.minDecibels=-90,this.analyser.maxDecibels=-30,this.analyser.smoothingTimeConstant=.85,this.dataArray=new Uint8Array(this.analyser.frequencyBinCount),this.freqData=new Uint8Array(this.analyser.frequencyBinCount)),!this.source||this.source.mediaElement!==t){if(this.source)try{this.source.disconnect()}catch{console.log("No need to disconnect source")}try{this.source=this.audioCtx.createMediaElementSource(t),this.source.connect(this.analyser),this.analyser.connect(this.audioCtx.destination)}catch(e){if(console.log("Error connecting audio source:",e),e.name!=="InvalidStateError")throw e}}}updateVisualizer(){if(!this.isPlaying)return;requestAnimationFrame(()=>this.updateVisualizer()),(!this.dataArray||!this.freqData)&&(this.dataArray=new Uint8Array(this.analyser.frequencyBinCount),this.freqData=new Uint8Array(this.analyser.frequencyBinCount)),this.analyser.getByteFrequencyData(this.dataArray),this.updateSpectrogram(),this.ctx.fillStyle=getComputedStyle(document.documentElement).getPropertyValue("--primary-color"),this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);const t=this.canvas.width/this.dataArray.length*2.5;let e=0,a=0,s=0;for(let i=0;i<this.dataArray.length;i++){const n=this.dataArray[i];s+=n,n>this.dataArray[a]&&(a=i);const o=this.ctx.createLinearGradient(0,0,0,this.canvas.height);o.addColorStop(0,"#4a90e2"),o.addColorStop(1,"#1a3a4a"),this.ctx.fillStyle=o,this.ctx.fillRect(e,this.canvas.height-n/2,t,n/2),e+=t+1}return{peakFrequency:a*(this.audioCtx.sampleRate/2)/this.dataArray.length,averageVolume:s/this.dataArray.length}}updateSpectrogram(){if(!this.isPlaying||!this.freqData)return;this.analyser.getByteFrequencyData(this.freqData);const t=this.spectrogramCtx.getImageData(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height);this.spectrogramCtx.clearRect(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.spectrogramCtx.putImageData(t,1,0);const e=this.spectrogramCanvas.height/this.analyser.frequencyBinCount,a=this.spectrogramCtx.createImageData(1,this.spectrogramCanvas.height);for(let s=0;s<this.freqData.length;s++){const i=this.freqData[s],n=Math.floor(s*e),o=Math.floor(i/255*255),h=this.spectrogramGradient[o*4],d=this.spectrogramGradient[o*4+1],m=this.spectrogramGradient[o*4+2];for(let l=0;l<e&&n+l<this.spectrogramCanvas.height;l++){const g=(n+l)*4;a.data[g]=h,a.data[g+1]=d,a.data[g+2]=m,a.data[g+3]=255}}this.spectrogramCtx.putImageData(a,0,0),this.drawTimeMarker(),this.drawUnitMarkers()}drawTimeMarker(){if(!this.audioElement||!this.isPlaying)return;const e=this.audioElement.currentTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.strokeStyle="rgba(255, 255, 255, 0.5)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(e,0),this.spectrogramCtx.lineTo(e,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()}drawUnitMarkers(){!this.analyzedUnits||!this.analyzedUnits.length||this.analyzedUnits.forEach((t,e)=>{const a=t.startTime/this.audioDuration*this.spectrogramCanvas.width,s=t.endTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.fillStyle="rgba(0, 255, 0, 0.05)",this.spectrogramCtx.fillRect(a,0,s-a,this.spectrogramCanvas.height),this.spectrogramCtx.strokeStyle="rgba(0, 255, 0, 0.3)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(a,0),this.spectrogramCtx.lineTo(a,this.spectrogramCanvas.height),this.spectrogramCtx.moveTo(s,0),this.spectrogramCtx.lineTo(s,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()})}detectUnits(){const t=[];let e={start:0,end:0,data:[]},a=20;for(let s=0;s<this.spectrogramData.length;s++)this.spectrogramData[s].reduce((n,o)=>n+o,0)/this.spectrogramData[s].length>a?(e.start===0&&(e.start=s),e.data.push(this.spectrogramData[s])):e.start!==0&&(e.end=s,t.push(e),e={start:0,end:0,data:[]});return t}start(){this.isPlaying=!0,this.updateVisualizer()}stop(){this.isPlaying=!1}getAudioData(){if(!this.analyser||!this.dataArray)return null;this.analyser.getByteFrequencyData(this.dataArray);let t=0,e=0;for(let a=0;a<this.dataArray.length;a++)t+=this.dataArray[a],this.dataArray[a]>this.dataArray[e]&&(e=a);return{peakFrequency:e*(this.audioCtx.sampleRate/2)/this.dataArray.length,averageVolume:t/this.dataArray.length,units:this.detectUnits()}}async analyzeAudioFile(t){console.log("Analyzing audio file...");try{const e=await t.arrayBuffer(),a=new(window.AudioContext||window.webkitAudioContext),s=await a.decodeAudioData(e),i=a.createAnalyser();i.fftSize=this.fftSize,i.minDecibels=-90,i.maxDecibels=-30,i.smoothingTimeConstant=.8;const n=i.frequencyBinCount,o=this.fftSize,h=Math.ceil(s.length/o);console.log("Analysis parameters:",{fftSize:this.fftSize,bufferLength:n,totalSlices:h,duration:s.duration,sampleRate:s.sampleRate,channels:s.numberOfChannels,totalSamples:s.length});const d=s.getChannelData(0),m=new Float32Array(h*n);console.log("Starting slice processing...");const l=document.createElement("canvas");l.width=h,l.height=n;const g=l.getContext("2d");for(let u=0;u<h;u++){const y=u*o,T=Math.min(y+o,d.length)-y;let C=0;for(let r=0;r<T;r++)C=Math.max(C,Math.abs(d[y+r]));if(C<.01){for(let r=0;r<this.fftSize/2;r++)m[u*n+r]=-90;continue}const v=new OfflineAudioContext(1,this.fftSize,s.sampleRate),c=v.createAnalyser();c.fftSize=this.fftSize,c.minDecibels=-90,c.maxDecibels=-30,c.smoothingTimeConstant=0;const x=v.createBuffer(1,this.fftSize,s.sampleRate),f=x.getChannelData(0);for(let r=0;r<this.fftSize;r++)if(r<T){const L=.5*(1-Math.cos(2*Math.PI*r/T));f[r]=d[y+r]*L}else f[r]=0;const w=v.createBufferSource();w.buffer=x,w.connect(c),c.connect(v.destination);const I=new Promise((r,L)=>{v.oncomplete=A=>r(A.renderedBuffer),v.onerror=L});w.start(0),await v.startRendering(),await I;const p=new Float32Array(c.frequencyBinCount);c.getFloatFrequencyData(p);for(let r=0;r<c.frequencyBinCount;r++)m[u*n+r]=p[r];const b=g.createImageData(1,n);for(let r=0;r<n;r++){const A=(p[r]-c.minDecibels)/(c.maxDecibels-c.minDecibels),D=Math.max(0,Math.min(1,A)),z=Math.floor(D*255),M=this.spectrogramGradient[z*4],B=this.spectrogramGradient[z*4+1],k=this.spectrogramGradient[z*4+2],E=(n-1-r)*4;b.data[E]=M,b.data[E+1]=B,b.data[E+2]=k,b.data[E+3]=255}g.putImageData(b,u,0),u%100===0&&console.log(`Processing slice ${u}/${h}`,{timeOffset:u*o/s.sampleRate,maxAmplitude:C,sampleFreqData:p.slice(0,5),minValue:Math.min(...p),maxValue:Math.max(...p),avgValue:p.reduce((r,L)=>r+L,0)/p.length})}return console.log("Finished processing all slices"),this.fullSpectrogramData=m,this.fullSpectrogramImage=l,this.analyzedUnits=this.detectUnitsFromSpectrogram(m,s.sampleRate,o),console.log("Analysis complete:",{unitsFound:this.analyzedUnits.length,totalSlices:h,spectrogramWidth:l.width,spectrogramHeight:l.height}),this.renderFullSpectrogram(),{units:this.analyzedUnits,duration:s.duration,sampleRate:s.sampleRate}}catch(e){throw console.error("Error analyzing audio file:",e),e}}renderFullSpectrogram(){this.spectrogramCtx.clearRect(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.spectrogramCtx.drawImage(this.fullSpectrogramImage,0,0,this.fullSpectrogramImage.width,this.fullSpectrogramImage.height,0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.analyzedUnits&&this.drawUnitMarkers(),this.isPlaying&&this.audioElement&&this.drawTimeMarker()}updateSpectrogram(){this.fullSpectrogramImage&&this.renderFullSpectrogram()}drawTimeMarker(){if(!this.audioElement)return;const e=this.audioElement.currentTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.strokeStyle="rgba(255, 255, 255, 0.8)",this.spectrogramCtx.lineWidth=2,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(e,0),this.spectrogramCtx.lineTo(e,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()}drawUnitMarkers(){this.analyzedUnits&&this.analyzedUnits.forEach((t,e)=>{const a=t.startTime/this.audioDuration*this.spectrogramCanvas.width,s=t.endTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.fillStyle="rgba(0, 255, 0, 0.1)",this.spectrogramCtx.fillRect(a,0,s-a,this.spectrogramCanvas.height),this.spectrogramCtx.strokeStyle="rgba(0, 255, 0, 0.5)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(a,0),this.spectrogramCtx.lineTo(a,this.spectrogramCanvas.height),this.spectrogramCtx.moveTo(s,0),this.spectrogramCtx.lineTo(s,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()})}detectUnitsFromSpectrogram(t,e,a){const s=[];let i=null;const n=this.fftSize/2,o=Math.floor(50*this.fftSize/e),h=Math.floor(4e3*this.fftSize/e),d=-70;this.minUnitDuration=.1,console.log("Unit detection parameters:",{minBin:o,maxBin:h,sampleRate:e,samplesPerSlice:a,totalSlices:t.length/n,baseThreshold:d,minDuration:this.minUnitDuration});let m=0,l=[],g=0;for(let c=0;c<t.length/n;c++){const x=c*n,f=t.slice(x+o,x+h),w=f.reduce((I,p)=>I+p,0)/f.length;m+=w,l.push(w),g++}const u=m/g,y=l.reduce((c,x)=>{const f=x-u;return c+f*f},0)/g,F=Math.sqrt(y);console.log("Signal statistics:",{averageIntensity:u,stdDev:F,maxIntensity:Math.max(...l),minIntensity:Math.min(...l)});const T=Math.max(d,u+2*F);console.log("Using adaptive threshold:",T);let C=0;const v=Math.ceil(this.minUnitDuration*e/a);for(let c=0;c<t.length/n;c++){const x=c*n,f=c*(a/e),w=t.slice(x+o,x+h),I=w.reduce((p,b)=>p+b,0)/w.length;if(c%100===0&&console.log(`Frame ${c}:`,{avgIntensity:I,threshold:T,timestamp:f,consecutiveFrames:C,minConsecutiveFrames:v}),I>T){C++,i||(console.log(`Potential unit start at ${f}s with intensity ${I}dB`),i={startTime:f,endTime:f,peakFrequencies:[],avgIntensity:[],spectrogramSlices:[]}),i.endTime=f;const p=t.slice(x,x+n);i.spectrogramSlices.push(Array.from(p));let b=0,r=w[0];for(let A=1;A<w.length;A++)w[A]>r&&(r=w[A],b=A);const L=50+b*e/this.fftSize;i.peakFrequencies.push(L),i.avgIntensity.push(I)}else{if(i&&C>=v){const p=i.endTime-i.startTime;i.dominantFrequency=this.calculateDominantFrequency(i.peakFrequencies),i.averageIntensity=i.avgIntensity.reduce((b,r)=>b+r)/i.avgIntensity.length,i.duration=p,console.log("Found unit:",{startTime:i.startTime,endTime:i.endTime,duration:p,dominantFreq:i.dominantFrequency,avgIntensity:i.averageIntensity,consecutiveFrames:C}),s.push(i)}i=null,C=0}}if(i&&C>=v){const c=i.endTime-i.startTime;i.dominantFrequency=this.calculateDominantFrequency(i.peakFrequencies),i.averageIntensity=i.avgIntensity.reduce((x,f)=>x+f)/i.avgIntensity.length,i.duration=c,s.push(i)}return s}findPeakFrequency(t,e){let a=0,s=t[0];for(let n=1;n<t.length;n++)t[n]>s&&(s=t[n],a=n);const i=e/(this.fftSize*2);return 100+a*i}calculateDominantFrequency(t){const e=new Map;let a=0,s=t[0];return t.forEach(i=>{const n=Math.round(i/10)*10,o=(e.get(n)||0)+1;e.set(n,o),o>a&&(a=o,s=n)}),s}}const q=["Narael","Vorrin","Selkai","Drumeth","Olaan","Caelo","Taruin","Fenja","Erelas"],U={names:q},$=["Raeth's Deep","The Shattered Reef","Olaan's Cry","Caelo's Rise","Narael's Fall","The Black Shoal","Driftwater","Ghost Trench"],O={locations:$},R=["his fluke low","her call fading","at dawn","when the current turned","as silence fell","beneath the storm","in mourning"],V={actions:R};class H{constructor(){this.names=U.names,this.locations=O.locations,this.actions=V.actions}pick(t){return t[Math.floor(Math.random()*t.length)]}getToneTag(t){return t>600?"high voice":t<200?"deep echo":"steady tone"}getMoodTag(t){return t>100?"with grief":t<30?"with peace":"with memory"}getAnalystAction(t,e){const a=["pattern detected","sequence complete","signal analyzed","data processed","transmission received"];return this.pick(a)}generatePhrase(t,e,a,s="emotionalist"){const i=this.pick(this.names),n=this.pick(this.locations),o=this.getToneTag(t),h=this.getMoodTag(e);let d;return s==="analyst"?d=this.getAnalystAction(t,e):d=this.pick(this.actions),`${i}, at ${n}, ${d} (${o}, ${h}) [${Math.round(a)}s]`}}class j{constructor(t){this.logList=t,this.phrases=JSON.parse(localStorage.getItem("bealePhrases")||"[]"),this.renderLog()}addPhrase(t){this.phrases.push({text:t,timestamp:new Date().toISOString()}),this.saveToStorage(),this.renderLog()}clearLog(){this.phrases=[],this.saveToStorage(),this.renderLog()}copyToClipboard(){const t=this.phrases.map(e=>e.text).join(`
`);navigator.clipboard.writeText(t)}exportAsTxt(){const t=this.phrases.map(e=>e.text).join(`
`);this.downloadFile(t,"beale-log.txt","text/plain")}exportAsJson(){const t=JSON.stringify(this.phrases,null,2);this.downloadFile(t,"beale-log.json","application/json")}downloadFile(t,e,a){const s=new Blob([t],{type:a}),i=URL.createObjectURL(s),n=document.createElement("a");n.href=i,n.download=e,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(i)}saveToStorage(){localStorage.setItem("bealePhrases",JSON.stringify(this.phrases))}renderLog(){this.logList.innerHTML="",this.phrases.forEach(t=>{const e=document.createElement("li");e.textContent=t.text,this.logList.appendChild(e)})}}const G=[{id:"sample1",title:"Humpback Whale Song - Pacific Ocean",description:"A classic humpback whale song recorded in the Pacific Ocean",filename:"humpback_whale_sound_pdb.mp3",duration:"4.07",source:"TBD"},{id:"sample2",title:"Humpback Whale Song - Hawaii",description:"A humpback whale song recorded by the Jupiter team in Hawaii",filename:"humpback_hawaii_jupiter_1.mp3",duration:"2.47",source:"TBD"},{id:"sample3",title:"Humpback Whale Song - NOAA",description:"A humpback whale song, NOAA Sounds of the Sea Project",filename:"noaa_humpback_whale_1.mp3",duration:".47",source:"TBD"}],W={audioFiles:G};class N{constructor(t,e){this.audioFiles=W.audioFiles,this.select=document.getElementById("audioLibrary"),this.audioElement=document.getElementById("audio"),this.descriptionDiv=document.getElementById("audioDescription"),this.analyzeBtn=document.getElementById("analyzeLibraryAudio"),this.onAnalyzeLibraryAudio=t,this.onAudioLoaded=e,this.selectedFile=null,this.initializeLibrary()}initializeLibrary(){this.audioFiles.forEach(t=>{const e=document.createElement("option");e.value=t.filename,e.textContent=`${t.title} (${t.duration})`,this.select.appendChild(e)}),this.select.addEventListener("change",t=>{const e=this.audioFiles.find(a=>a.filename===t.target.value);e?(this.selectedFile=e,this.loadAudioFile(e.filename),this.descriptionDiv.innerHTML=`<strong>Description:</strong> ${e.description}<br><strong>Source:</strong> ${e.source}`,this.analyzeBtn.disabled=!1,this.analyzeBtn.classList.add("show"),this.onAudioLoaded&&this.onAudioLoaded()):(this.selectedFile=null,this.descriptionDiv.innerHTML="",this.analyzeBtn.disabled=!0,this.analyzeBtn.classList.remove("show"),this.onAudioLoaded&&this.onAudioLoaded(!1))}),this.analyzeBtn.addEventListener("click",()=>{this.selectedFile&&this.onAnalyzeLibraryAudio&&this.onAnalyzeLibraryAudio(this.selectedFile)})}loadAudioFile(t){const e=`audio/${t}`;this.audioElement.src=e,this.audioElement.load()}getCurrentAudio(){return this.audioElement}}class J{constructor(){console.log("Initializing BEALELite..."),this.audioFile=document.getElementById("audioFile"),this.audio=document.getElementById("audio"),this.canvas=document.getElementById("visualizer"),this.spectrogramCanvas=document.getElementById("spectrogram"),this.phraseOutput=document.getElementById("phrase"),this.logList=document.getElementById("logList"),this.emotionalistMode=document.getElementById("emotionalistMode"),this.analystMode=document.getElementById("analystMode"),this.copyLog=document.getElementById("copyLog"),this.exportTxt=document.getElementById("exportTxt"),this.exportJson=document.getElementById("exportJson"),this.clearLog=document.getElementById("clearLog"),this.customPlayBtn=document.getElementById("customPlay"),this.playIcon=document.getElementById("playIcon"),this.pauseIcon=document.getElementById("pauseIcon"),this.audioStatus=document.getElementById("audioStatus"),console.log("DOM elements initialized:",{audioFile:!!this.audioFile,audio:!!this.audio,canvas:!!this.canvas,spectrogramCanvas:!!this.spectrogramCanvas}),this.audioProcessor=new P(this.canvas,this.spectrogramCanvas),this.phraseGenerator=new H,this.logManager=new j(this.logList),this.currentMode="emotionalist",this.lastLoggedTime=0,this.logInterval=4,this.isAudioInitialized=!1,this.analyzedUnits=[],this.bindEvents()}bindEvents(){console.log("Binding events..."),this.audioFile.addEventListener("change",async t=>{console.log("File selected, handling file select..."),await this.handleFileSelect(t)}),this.audio.addEventListener("play",()=>{console.log("Audio playback started..."),this.isAudioInitialized||(console.log("Initializing audio processor..."),this.audioProcessor.initialize(this.audio),this.isAudioInitialized=!0),this.audioProcessor.start(),this.lastLoggedTime=0,this.playIcon.style.display="none",this.pauseIcon.style.display=""}),this.audio.addEventListener("pause",()=>{console.log("Audio paused, stopping audio processor..."),this.audioProcessor.stop(),this.playIcon.style.display="",this.pauseIcon.style.display="none"}),this.emotionalistMode.addEventListener("click",()=>this.setMode("emotionalist")),this.analystMode.addEventListener("click",()=>this.setMode("analyst")),this.copyLog.addEventListener("click",()=>this.logManager.copyToClipboard()),this.exportTxt.addEventListener("click",()=>this.logManager.exportAsTxt()),this.exportJson.addEventListener("click",()=>this.logManager.exportAsJson()),this.clearLog.addEventListener("click",()=>this.logManager.clearLog()),this.customPlayBtn.addEventListener("click",()=>{this.audio.src&&!this.customPlayBtn.disabled&&(this.audio.paused?this.audio.play():this.audio.pause())}),requestAnimationFrame(()=>this.update())}async handleFileSelect(t){console.log("Handling file select...");const e=t.target.files[0];if(!e){console.log("No file selected"),this.setAudioLoadedState(!1);return}console.log("File selected:",e.name);try{this.phraseOutput.textContent="Analyzing audio file",this.phraseOutput.classList.add("loading-text");const a=await this.audioProcessor.analyzeAudioFile(e);this.analyzedUnits=a.units,this.phraseOutput.classList.remove("loading-text"),console.log("Analysis results:",{numberOfUnits:this.analyzedUnits.length,duration:a.duration,sampleRate:a.sampleRate}),this.logManager.addPhrase(`Found ${this.analyzedUnits.length} distinct units in the audio file (${a.duration.toFixed(2)} seconds):`),this.analyzedUnits.forEach((n,o)=>{const h=n.startTime.toFixed(2),d=n.endTime.toFixed(2),m=n.duration.toFixed(2),l=n.dominantFrequency.toFixed(0),g=n.averageIntensity.toFixed(1),u=[`Unit ${o+1}:`,`  Time: ${h}s to ${d}s (duration: ${m}s)`,`  Dominant Frequency: ${l} Hz`,`  Average Intensity: ${g} dB`,`  Peak Frequencies Range: ${Math.min(...n.peakFrequencies).toFixed(0)}Hz - ${Math.max(...n.peakFrequencies).toFixed(0)}Hz`].join(`
`);this.logManager.addPhrase(u)});const s=URL.createObjectURL(e);this.audio.src=s,this.isAudioInitialized=!1,this.phraseOutput.textContent="Analysis complete - Ready to play";const i=document.getElementById("unit-view");if(i&&i.remove(),a.units&&a.units.length>0){const n=this.createUnitView(a.units);document.querySelector(".container").appendChild(n)}this.setAudioLoadedState(!0)}catch(a){console.error("Error analyzing file:",a),this.phraseOutput.textContent="Error analyzing audio file"}}setMode(t){this.currentMode=t,this.emotionalistMode.classList.toggle("active",t==="emotionalist"),this.analystMode.classList.toggle("active",t==="analyst")}update(){if(requestAnimationFrame(()=>this.update()),!this.audioProcessor.isPlaying)return;const t=this.audioProcessor.getAudioData();if(!t)return;const e=this.audio.currentTime;if(e-this.lastLoggedTime>=this.logInterval){const a=this.phraseGenerator.generatePhrase(t.peakFrequency,t.averageVolume,e,this.currentMode);this.phraseOutput.textContent=a,this.logManager.addPhrase(a),this.lastLoggedTime=e}}createUnitView(t){const e=document.createElement("div");e.id="unit-view",e.style.cssText=`
      margin-top: 20px;
      padding: 20px;
      background: var(--secondary-bg);
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    `;const a=document.createElement("h2");a.textContent="Detected Units",a.style.marginBottom="15px",e.appendChild(a);const s=document.createElement("div");return s.style.cssText=`
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
    `,t.forEach((i,n)=>{const o=document.createElement("div");o.className="unit-card",o.style.cssText=`
        padding: 15px;
        background: var(--primary-bg);
        border-radius: 6px;
        border: 1px solid var(--border-color);
      `;const h=document.createElement("h3");h.textContent=`Unit ${n+1}`,h.style.marginBottom="10px";const d=document.createElement("canvas");d.width=280,d.height=80,d.style.cssText=`
        width: 100%;
        height: 80px;
        background: #000;
        border-radius: 4px;
        margin-bottom: 10px;
      `,this.drawUnitSpectrogram(d,i);const m=document.createElement("div");m.innerHTML=`
        <div style="margin-bottom: 8px;">
          <strong>Time Range:</strong> ${i.startTime.toFixed(2)}s - ${i.endTime.toFixed(2)}s
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Duration:</strong> ${i.duration.toFixed(2)}s
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Dominant Frequency:</strong> ${i.dominantFrequency.toFixed(1)} Hz
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Average Intensity:</strong> ${i.averageIntensity.toFixed(1)} dB
        </div>
      `;const l=document.createElement("button");l.textContent="Play Unit",l.style.cssText=`
        background: var(--accent-color);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        width: 100%;
        position: relative;
        overflow: hidden;
      `;const g=document.createElement("div");g.style.cssText=`
        position: absolute;
        left: 0;
        bottom: 0;
        height: 2px;
        width: 0%;
        background: rgba(255, 255, 255, 0.5);
        transition: width 0.1s linear;
      `,l.appendChild(g);let u=!1;l.onclick=()=>{const y=document.querySelector("audio");if(y)if(u)y.pause(),l.textContent="Play Unit",g.style.width="0%",u=!1;else{y.currentTime=i.startTime,y.play(),l.textContent="Stop",u=!0;const F=()=>{if(!u)return;const T=(y.currentTime-i.startTime)/i.duration*100;g.style.width=`${Math.min(100,T)}%`,y.currentTime<i.startTime+i.duration&&u?requestAnimationFrame(F):(u=!1,l.textContent="Play Unit",g.style.width="0%")};F(),setTimeout(()=>{u&&(y.pause(),l.textContent="Play Unit",g.style.width="0%",u=!1)},i.duration*1e3)}},o.appendChild(h),o.appendChild(d),o.appendChild(m),o.appendChild(l),s.appendChild(o)}),e.appendChild(s),e}drawUnitSpectrogram(t,e){const a=t.getContext("2d"),s=e.spectrogramSlices;if(!s||s.length===0)return;const i=t.width/s.length,n=t.height;a.clearRect(0,0,t.width,t.height);let o=1/0,h=-1/0;s.forEach(d=>{d.forEach(m=>{o=Math.min(o,m),h=Math.max(h,m)})}),isFinite(o)||(o=-90),isFinite(h)||(h=-30),s.forEach((d,m)=>{const l=m*i;d.forEach((g,u)=>{const y=(g-o)/(h-o),F=n*(u/d.length),T=n/d.length,C=Math.floor(y*255),v=this.getSpectrogramColor(C);a.fillStyle=v,a.fillRect(l,n-F,i,-T)})})}getSpectrogramColor(t){return t<64?`rgb(0, 0, ${Math.floor(t*4)})`:t<128?`rgb(0, ${Math.floor((t-64)*4)}, 255)`:t<192?`rgb(${Math.floor((t-128)*4)}, 255, ${Math.floor(255-(t-128)*4)})`:`rgb(255, ${Math.floor(255-(t-192)*4)}, 0)`}setAudioLoadedState(t){t?(this.audio.pause(),this.audio.currentTime=0,this.customPlayBtn.disabled=!1,this.playIcon.style.display="",this.pauseIcon.style.display="none",this.audioStatus.textContent=""):(this.audio.pause(),this.audio.currentTime=0,this.customPlayBtn.disabled=!0,this.playIcon.style.display="",this.pauseIcon.style.display="none",this.audioStatus.textContent="No audio loaded. Please select or upload a track.")}async analyzeLibraryAudio(t){try{this.phraseOutput.textContent="Analyzing audio file",this.phraseOutput.classList.add("loading-text");const a=await(await fetch(`audio/${t.filename}`)).blob(),s=new File([a],t.filename,{type:a.type});await this.handleFileSelect({target:{files:[s]}})}catch(e){this.phraseOutput.textContent="Error analyzing audio file",console.error("Error analyzing library audio:",e)}}}document.addEventListener("DOMContentLoaded",()=>{let S;new N(t=>{S&&S.analyzeLibraryAudio(t)},(t=!0)=>{S&&S.setAudioLoadedState(t)}),S=new J});
