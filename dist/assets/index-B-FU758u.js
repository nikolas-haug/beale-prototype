(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const i of a)if(i.type==="childList")for(const n of i.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function e(a){const i={};return a.integrity&&(i.integrity=a.integrity),a.referrerPolicy&&(i.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?i.credentials="include":a.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(a){if(a.ep)return;a.ep=!0;const i=e(a);fetch(a.href,i)}})();class U{constructor(t,e){this.canvas=t,this.spectrogramCanvas=e,this.ctx=t.getContext("2d"),this.spectrogramCtx=e.getContext("2d"),this.audioCtx=null,this.analyser=null,this.source=null,this.isPlaying=!1,this.spectrogramData=[],this.maxSpectrogramLength=200,this.fftSize=2048,this.audioDuration=0,this.audioElement=null,this.dataArray=null,this.freqData=null,console.log("Initializing AudioProcessor with spectrogram:",{canvas:!!t,spectrogramCanvas:!!e}),this.canvas.width=this.canvas.offsetWidth,this.canvas.height=150,this.spectrogramCanvas.width=this.spectrogramCanvas.offsetWidth,this.spectrogramCanvas.height=150,window.addEventListener("resize",()=>{this.canvas.width=this.canvas.offsetWidth,this.spectrogramCanvas.width=this.spectrogramCanvas.offsetWidth,this.updateVisualizer()}),this.spectrogramGradient=this.createSpectrogramGradient(),this.analyzedUnits=[],this.unitThreshold=-70,this.minUnitDuration=.2,this.maxUnitDuration=2}createSpectrogramGradient(){const t=document.createElement("canvas");t.width=1,t.height=256;const e=t.getContext("2d"),s=e.createLinearGradient(0,0,0,256);return s.addColorStop(0,"#000060"),s.addColorStop(.5,"#00ff00"),s.addColorStop(.75,"#ffff00"),s.addColorStop(1,"#ff0000"),e.fillStyle=s,e.fillRect(0,0,1,256),e.getImageData(0,0,1,256).data}initialize(t){if(console.log("Initializing audio context and analyser"),this.audioElement=t,this.audioDuration=t.duration,this.audioCtx||(this.audioCtx=new(window.AudioContext||window.webkitAudioContext)),this.analyser||(this.analyser=this.audioCtx.createAnalyser(),this.analyser.fftSize=this.fftSize,this.analyser.minDecibels=-90,this.analyser.maxDecibels=-30,this.analyser.smoothingTimeConstant=.85,this.dataArray=new Uint8Array(this.analyser.frequencyBinCount),this.freqData=new Uint8Array(this.analyser.frequencyBinCount)),this.source)try{this.source.disconnect()}catch{console.log("No need to disconnect source")}try{this.source=this.audioCtx.createMediaElementSource(t),this.source.connect(this.analyser),this.analyser.connect(this.audioCtx.destination)}catch(e){if(console.log("Error connecting audio source:",e),e.name!=="InvalidStateError")throw e}}updateVisualizer(){if(!this.isPlaying)return;requestAnimationFrame(()=>this.updateVisualizer()),(!this.dataArray||!this.freqData)&&(this.dataArray=new Uint8Array(this.analyser.frequencyBinCount),this.freqData=new Uint8Array(this.analyser.frequencyBinCount)),this.analyser.getByteFrequencyData(this.dataArray),this.updateSpectrogram(),this.ctx.fillStyle=getComputedStyle(document.documentElement).getPropertyValue("--primary-color"),this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);const t=this.canvas.width/this.dataArray.length*2.5;let e=0,s=0,a=0;for(let i=0;i<this.dataArray.length;i++){const n=this.dataArray[i];a+=n,n>this.dataArray[s]&&(s=i);const r=this.ctx.createLinearGradient(0,0,0,this.canvas.height);r.addColorStop(0,"#4a90e2"),r.addColorStop(1,"#1a3a4a"),this.ctx.fillStyle=r,this.ctx.fillRect(e,this.canvas.height-n/2,t,n/2),e+=t+1}return{peakFrequency:s*(this.audioCtx.sampleRate/2)/this.dataArray.length,averageVolume:a/this.dataArray.length}}updateSpectrogram(){if(!this.isPlaying||!this.freqData)return;this.analyser.getByteFrequencyData(this.freqData);const t=this.spectrogramCtx.getImageData(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height);this.spectrogramCtx.clearRect(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.spectrogramCtx.putImageData(t,1,0);const e=this.spectrogramCanvas.height/this.analyser.frequencyBinCount,s=this.spectrogramCtx.createImageData(1,this.spectrogramCanvas.height);for(let a=0;a<this.freqData.length;a++){const i=this.freqData[a],n=Math.floor(a*e),r=Math.floor(i/255*255),h=this.spectrogramGradient[r*4],d=this.spectrogramGradient[r*4+1],m=this.spectrogramGradient[r*4+2];for(let l=0;l<e&&n+l<this.spectrogramCanvas.height;l++){const u=(n+l)*4;s.data[u]=h,s.data[u+1]=d,s.data[u+2]=m,s.data[u+3]=255}}this.spectrogramCtx.putImageData(s,0,0),this.drawTimeMarker(),this.drawUnitMarkers()}drawTimeMarker(){if(!this.audioElement||!this.isPlaying)return;const e=this.audioElement.currentTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.strokeStyle="rgba(255, 255, 255, 0.5)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(e,0),this.spectrogramCtx.lineTo(e,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()}drawUnitMarkers(){!this.analyzedUnits||!this.analyzedUnits.length||this.analyzedUnits.forEach((t,e)=>{const s=t.startTime/this.audioDuration*this.spectrogramCanvas.width,a=t.endTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.fillStyle="rgba(0, 255, 0, 0.05)",this.spectrogramCtx.fillRect(s,0,a-s,this.spectrogramCanvas.height),this.spectrogramCtx.strokeStyle="rgba(0, 255, 0, 0.3)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(s,0),this.spectrogramCtx.lineTo(s,this.spectrogramCanvas.height),this.spectrogramCtx.moveTo(a,0),this.spectrogramCtx.lineTo(a,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()})}detectUnits(){const t=[];let e={start:0,end:0,data:[]},s=20;for(let a=0;a<this.spectrogramData.length;a++)this.spectrogramData[a].reduce((n,r)=>n+r,0)/this.spectrogramData[a].length>s?(e.start===0&&(e.start=a),e.data.push(this.spectrogramData[a])):e.start!==0&&(e.end=a,t.push(e),e={start:0,end:0,data:[]});return t}start(){this.isPlaying=!0,this.updateVisualizer()}stop(){this.isPlaying=!1}getAudioData(){if(!this.analyser||!this.dataArray)return null;this.analyser.getByteFrequencyData(this.dataArray);let t=0,e=0;for(let s=0;s<this.dataArray.length;s++)t+=this.dataArray[s],this.dataArray[s]>this.dataArray[e]&&(e=s);return{peakFrequency:e*(this.audioCtx.sampleRate/2)/this.dataArray.length,averageVolume:t/this.dataArray.length,units:this.detectUnits()}}async analyzeAudioFile(t){console.log("Analyzing audio file...");try{const e=await t.arrayBuffer(),s=new(window.AudioContext||window.webkitAudioContext),a=await s.decodeAudioData(e),i=s.createAnalyser();i.fftSize=this.fftSize,i.minDecibels=-90,i.maxDecibels=-30,i.smoothingTimeConstant=.8;const n=i.frequencyBinCount,r=this.fftSize,h=Math.ceil(a.length/r);console.log("Analysis parameters:",{fftSize:this.fftSize,bufferLength:n,totalSlices:h,duration:a.duration,sampleRate:a.sampleRate,channels:a.numberOfChannels,totalSamples:a.length});const d=a.getChannelData(0),m=new Float32Array(h*n);console.log("Starting slice processing...");const l=document.createElement("canvas");l.width=h,l.height=n;const u=l.getContext("2d");for(let g=0;g<h;g++){const f=g*r,S=Math.min(f+r,d.length)-f;let C=0;for(let o=0;o<S;o++)C=Math.max(C,Math.abs(d[f+o]));if(C<.01){for(let o=0;o<this.fftSize/2;o++)m[g*n+o]=-90;continue}const v=new OfflineAudioContext(1,this.fftSize,a.sampleRate),c=v.createAnalyser();c.fftSize=this.fftSize,c.minDecibels=-90,c.maxDecibels=-30,c.smoothingTimeConstant=0;const x=v.createBuffer(1,this.fftSize,a.sampleRate),y=x.getChannelData(0);for(let o=0;o<this.fftSize;o++)if(o<S){const M=.5*(1-Math.cos(2*Math.PI*o/S));y[o]=d[f+o]*M}else y[o]=0;const w=v.createBufferSource();w.buffer=x,w.connect(c),c.connect(v.destination);const D=new Promise((o,M)=>{v.oncomplete=b=>o(b.renderedBuffer),v.onerror=M});w.start(0),await v.startRendering(),await D;const p=new Float32Array(c.frequencyBinCount);c.getFloatFrequencyData(p);for(let o=0;o<c.frequencyBinCount;o++)m[g*n+o]=p[o];const T=u.createImageData(1,n);for(let o=0;o<n;o++){const b=(p[o]-c.minDecibels)/(c.maxDecibels-c.minDecibels),E=Math.max(0,Math.min(1,b)),z=Math.floor(E*255),L=this.spectrogramGradient[z*4],q=this.spectrogramGradient[z*4+1],k=this.spectrogramGradient[z*4+2],A=(n-1-o)*4;T.data[A]=L,T.data[A+1]=q,T.data[A+2]=k,T.data[A+3]=255}u.putImageData(T,g,0),g%100===0&&console.log(`Processing slice ${g}/${h}`,{timeOffset:g*r/a.sampleRate,maxAmplitude:C,sampleFreqData:p.slice(0,5),minValue:Math.min(...p),maxValue:Math.max(...p),avgValue:p.reduce((o,M)=>o+M,0)/p.length})}return console.log("Finished processing all slices"),this.fullSpectrogramData=m,this.fullSpectrogramImage=l,this.analyzedUnits=this.detectUnitsFromSpectrogram(m,a.sampleRate,r),console.log("Analysis complete:",{unitsFound:this.analyzedUnits.length,totalSlices:h,spectrogramWidth:l.width,spectrogramHeight:l.height}),this.renderFullSpectrogram(),{units:this.analyzedUnits,duration:a.duration,sampleRate:a.sampleRate}}catch(e){throw console.error("Error analyzing audio file:",e),e}}renderFullSpectrogram(){this.spectrogramCtx.clearRect(0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.spectrogramCtx.drawImage(this.fullSpectrogramImage,0,0,this.fullSpectrogramImage.width,this.fullSpectrogramImage.height,0,0,this.spectrogramCanvas.width,this.spectrogramCanvas.height),this.analyzedUnits&&this.drawUnitMarkers(),this.isPlaying&&this.audioElement&&this.drawTimeMarker()}updateSpectrogram(){this.fullSpectrogramImage&&this.renderFullSpectrogram()}drawTimeMarker(){if(!this.audioElement)return;const e=this.audioElement.currentTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.strokeStyle="rgba(255, 255, 255, 0.8)",this.spectrogramCtx.lineWidth=2,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(e,0),this.spectrogramCtx.lineTo(e,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()}drawUnitMarkers(){this.analyzedUnits&&this.analyzedUnits.forEach((t,e)=>{const s=t.startTime/this.audioDuration*this.spectrogramCanvas.width,a=t.endTime/this.audioDuration*this.spectrogramCanvas.width;this.spectrogramCtx.fillStyle="rgba(0, 255, 0, 0.1)",this.spectrogramCtx.fillRect(s,0,a-s,this.spectrogramCanvas.height),this.spectrogramCtx.strokeStyle="rgba(0, 255, 0, 0.5)",this.spectrogramCtx.lineWidth=1,this.spectrogramCtx.beginPath(),this.spectrogramCtx.moveTo(s,0),this.spectrogramCtx.lineTo(s,this.spectrogramCanvas.height),this.spectrogramCtx.moveTo(a,0),this.spectrogramCtx.lineTo(a,this.spectrogramCanvas.height),this.spectrogramCtx.stroke()})}detectUnitsFromSpectrogram(t,e,s){const a=[];let i=null;const n=this.fftSize/2,r=Math.floor(50*this.fftSize/e),h=Math.floor(4e3*this.fftSize/e),d=-70;this.minUnitDuration=.1,console.log("Unit detection parameters:",{minBin:r,maxBin:h,sampleRate:e,samplesPerSlice:s,totalSlices:t.length/n,baseThreshold:d,minDuration:this.minUnitDuration});let m=0,l=[],u=0;for(let c=0;c<t.length/n;c++){const x=c*n,y=t.slice(x+r,x+h),w=y.reduce((D,p)=>D+p,0)/y.length;m+=w,l.push(w),u++}const g=m/u,f=l.reduce((c,x)=>{const y=x-g;return c+y*y},0)/u,F=Math.sqrt(f);console.log("Signal statistics:",{averageIntensity:g,stdDev:F,maxIntensity:Math.max(...l),minIntensity:Math.min(...l)});const S=Math.max(d,g+2*F);console.log("Using adaptive threshold:",S);let C=0;const v=Math.ceil(this.minUnitDuration*e/s);for(let c=0;c<t.length/n;c++){const x=c*n,y=c*(s/e),w=t.slice(x+r,x+h),D=w.reduce((p,T)=>p+T,0)/w.length;if(c%100===0&&console.log(`Frame ${c}:`,{avgIntensity:D,threshold:S,timestamp:y,consecutiveFrames:C,minConsecutiveFrames:v}),D>S){C++,i||(console.log(`Potential unit start at ${y}s with intensity ${D}dB`),i={startTime:y,endTime:y,peakFrequencies:[],avgIntensity:[],spectrogramSlices:[]}),i.endTime=y;const p=t.slice(x,x+n);i.spectrogramSlices.push(Array.from(p));let T=0,o=w[0];for(let b=1;b<w.length;b++)w[b]>o&&(o=w[b],T=b);const M=50+T*e/this.fftSize;i.peakFrequencies.push(M),i.avgIntensity.push(D)}else{if(i&&C>=v){const p=i.endTime-i.startTime;i.dominantFrequency=this.calculateDominantFrequency(i.peakFrequencies),i.averageIntensity=i.avgIntensity.reduce((T,o)=>T+o)/i.avgIntensity.length,i.duration=p,console.log("Found unit:",{startTime:i.startTime,endTime:i.endTime,duration:p,dominantFreq:i.dominantFrequency,avgIntensity:i.averageIntensity,consecutiveFrames:C}),a.push(i)}i=null,C=0}}if(i&&C>=v){const c=i.endTime-i.startTime;i.dominantFrequency=this.calculateDominantFrequency(i.peakFrequencies),i.averageIntensity=i.avgIntensity.reduce((x,y)=>x+y)/i.avgIntensity.length,i.duration=c,a.push(i)}return a}findPeakFrequency(t,e){let s=0,a=t[0];for(let n=1;n<t.length;n++)t[n]>a&&(a=t[n],s=n);const i=e/(this.fftSize*2);return 100+s*i}calculateDominantFrequency(t){const e=new Map;let s=0,a=t[0];return t.forEach(i=>{const n=Math.round(i/10)*10,r=(e.get(n)||0)+1;e.set(n,r),r>s&&(s=r,a=n)}),a}}const B=["Narael","Vorrin","Selkai","Drumeth","Olaan","Caelo","Taruin","Fenja","Erelas"],P={names:B},$=["Raeth's Deep","The Shattered Reef","Olaan's Cry","Caelo's Rise","Narael's Fall","The Black Shoal","Driftwater","Ghost Trench"],R={locations:$},O=["his fluke low","her call fading","at dawn","when the current turned","as silence fell","beneath the storm","in mourning"],V={actions:O};class G{constructor(){this.names=P.names,this.locations=R.locations,this.actions=V.actions}pick(t){return t[Math.floor(Math.random()*t.length)]}getToneTag(t){return t>600?"high voice":t<200?"deep echo":"steady tone"}getMoodTag(t){return t>100?"with grief":t<30?"with peace":"with memory"}getAnalystAction(t,e){const s=["pattern detected","sequence complete","signal analyzed","data processed","transmission received"];return this.pick(s)}generatePhrase(t,e,s,a="emotionalist"){const i=this.pick(this.names),n=this.pick(this.locations),r=this.getToneTag(t),h=this.getMoodTag(e);let d;return a==="analyst"?d=this.getAnalystAction(t,e):d=this.pick(this.actions),`${i}, at ${n}, ${d} (${r}, ${h}) [${Math.round(s)}s]`}}class j{constructor(t){this.logList=t,this.phrases=JSON.parse(localStorage.getItem("bealePhrases")||"[]"),this.renderLog()}addPhrase(t){this.phrases.push({text:t,timestamp:new Date().toISOString()}),this.saveToStorage(),this.renderLog()}clearLog(){this.phrases=[],this.saveToStorage(),this.renderLog()}copyToClipboard(){const t=this.phrases.map(e=>e.text).join(`
`);navigator.clipboard.writeText(t)}exportAsTxt(){const t=this.phrases.map(e=>e.text).join(`
`);this.downloadFile(t,"beale-log.txt","text/plain")}exportAsJson(){const t=JSON.stringify(this.phrases,null,2);this.downloadFile(t,"beale-log.json","application/json")}downloadFile(t,e,s){const a=new Blob([t],{type:s}),i=URL.createObjectURL(a),n=document.createElement("a");n.href=i,n.download=e,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(i)}saveToStorage(){localStorage.setItem("bealePhrases",JSON.stringify(this.phrases))}renderLog(){this.logList.innerHTML="",this.phrases.forEach(t=>{const e=document.createElement("li");e.textContent=t.text,this.logList.appendChild(e)})}}class W{constructor(){console.log("Initializing BEALELite..."),this.audioFile=document.getElementById("audioFile"),this.audio=document.getElementById("audio"),this.canvas=document.getElementById("visualizer"),this.spectrogramCanvas=document.getElementById("spectrogram"),this.phraseOutput=document.getElementById("phrase"),this.logList=document.getElementById("logList"),this.emotionalistMode=document.getElementById("emotionalistMode"),this.analystMode=document.getElementById("analystMode"),this.copyLog=document.getElementById("copyLog"),this.exportTxt=document.getElementById("exportTxt"),this.exportJson=document.getElementById("exportJson"),this.clearLog=document.getElementById("clearLog"),console.log("DOM elements initialized:",{audioFile:!!this.audioFile,audio:!!this.audio,canvas:!!this.canvas,spectrogramCanvas:!!this.spectrogramCanvas}),this.audioProcessor=new U(this.canvas,this.spectrogramCanvas),this.phraseGenerator=new G,this.logManager=new j(this.logList),this.currentMode="emotionalist",this.lastLoggedTime=0,this.logInterval=4,this.isAudioInitialized=!1,this.analyzedUnits=[],this.bindEvents()}bindEvents(){console.log("Binding events..."),this.audioFile.addEventListener("change",async t=>{console.log("File selected, handling file select..."),await this.handleFileSelect(t)}),this.audio.addEventListener("play",()=>{console.log("Audio playback started..."),this.isAudioInitialized||(console.log("Initializing audio processor..."),this.audioProcessor.initialize(this.audio),this.isAudioInitialized=!0),this.audioProcessor.start(),this.lastLoggedTime=0}),this.audio.addEventListener("pause",()=>{console.log("Audio paused, stopping audio processor..."),this.audioProcessor.stop()}),this.emotionalistMode.addEventListener("click",()=>this.setMode("emotionalist")),this.analystMode.addEventListener("click",()=>this.setMode("analyst")),this.copyLog.addEventListener("click",()=>this.logManager.copyToClipboard()),this.exportTxt.addEventListener("click",()=>this.logManager.exportAsTxt()),this.exportJson.addEventListener("click",()=>this.logManager.exportAsJson()),this.clearLog.addEventListener("click",()=>this.logManager.clearLog()),requestAnimationFrame(()=>this.update())}async handleFileSelect(t){console.log("Handling file select...");const e=t.target.files[0];if(!e){console.log("No file selected");return}console.log("File selected:",e.name);try{this.phraseOutput.textContent="Analyzing audio file",this.phraseOutput.classList.add("loading-text");const s=await this.audioProcessor.analyzeAudioFile(e);this.analyzedUnits=s.units,this.phraseOutput.classList.remove("loading-text"),console.log("Analysis results:",{numberOfUnits:this.analyzedUnits.length,duration:s.duration,sampleRate:s.sampleRate}),this.logManager.addPhrase(`Found ${this.analyzedUnits.length} distinct units in the audio file (${s.duration.toFixed(2)} seconds):`),this.analyzedUnits.forEach((n,r)=>{const h=n.startTime.toFixed(2),d=n.endTime.toFixed(2),m=n.duration.toFixed(2),l=n.dominantFrequency.toFixed(0),u=n.averageIntensity.toFixed(1),g=[`Unit ${r+1}:`,`  Time: ${h}s to ${d}s (duration: ${m}s)`,`  Dominant Frequency: ${l} Hz`,`  Average Intensity: ${u} dB`,`  Peak Frequencies Range: ${Math.min(...n.peakFrequencies).toFixed(0)}Hz - ${Math.max(...n.peakFrequencies).toFixed(0)}Hz`].join(`
`);this.logManager.addPhrase(g)});const a=URL.createObjectURL(e);this.audio.src=a,this.isAudioInitialized=!1,this.phraseOutput.textContent="Analysis complete - Ready to play";const i=document.getElementById("unit-view");if(i&&i.remove(),s.units&&s.units.length>0){const n=this.createUnitView(s.units);document.querySelector(".container").appendChild(n)}}catch(s){console.error("Error analyzing file:",s),this.phraseOutput.textContent="Error analyzing audio file"}}setMode(t){this.currentMode=t,this.emotionalistMode.classList.toggle("active",t==="emotionalist"),this.analystMode.classList.toggle("active",t==="analyst")}update(){if(requestAnimationFrame(()=>this.update()),!this.audioProcessor.isPlaying)return;const t=this.audioProcessor.getAudioData();if(!t)return;const e=this.audio.currentTime;if(e-this.lastLoggedTime>=this.logInterval){const s=this.phraseGenerator.generatePhrase(t.peakFrequency,t.averageVolume,e,this.currentMode);this.phraseOutput.textContent=s,this.logManager.addPhrase(s),this.lastLoggedTime=e}}createUnitView(t){const e=document.createElement("div");e.id="unit-view",e.style.cssText=`
      margin-top: 20px;
      padding: 20px;
      background: var(--secondary-bg);
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    `;const s=document.createElement("h2");s.textContent="Detected Units",s.style.marginBottom="15px",e.appendChild(s);const a=document.createElement("div");return a.style.cssText=`
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
    `,t.forEach((i,n)=>{const r=document.createElement("div");r.className="unit-card",r.style.cssText=`
        padding: 15px;
        background: var(--primary-bg);
        border-radius: 6px;
        border: 1px solid var(--border-color);
      `;const h=document.createElement("h3");h.textContent=`Unit ${n+1}`,h.style.marginBottom="10px";const d=document.createElement("canvas");d.width=280,d.height=80,d.style.cssText=`
        width: 100%;
        height: 80px;
        background: #000;
        border-radius: 4px;
        margin-bottom: 10px;
      `,this.drawUnitSpectrogram(d,i);const m=document.createElement("div");m.innerHTML=`
        <div style="margin-bottom: 8px;">
          <strong>Time Range:</strong> ${i.startTime.toFixed(2)}s - ${i.endTime.toFixed(2)}s
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Duration:</strong> ${i.duration.toFixed(2)}s
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Dominant Frequency:</strong> ${i.dominantFrequency.toFixed(1)} Hz
        </div>
        <div style="margin-bottom: 8px;">
          <strong>Average Intensity:</strong> ${i.averageIntensity.toFixed(1)} dB
        </div>
      `;const l=document.createElement("button");l.textContent="Play Unit",l.style.cssText=`
        background: var(--accent-color);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        width: 100%;
        position: relative;
        overflow: hidden;
      `;const u=document.createElement("div");u.style.cssText=`
        position: absolute;
        left: 0;
        bottom: 0;
        height: 2px;
        width: 0%;
        background: rgba(255, 255, 255, 0.5);
        transition: width 0.1s linear;
      `,l.appendChild(u);let g=!1;l.onclick=()=>{const f=document.querySelector("audio");if(f)if(g)f.pause(),l.textContent="Play Unit",u.style.width="0%",g=!1;else{f.currentTime=i.startTime,f.play(),l.textContent="Stop",g=!0;const F=()=>{if(!g)return;const S=(f.currentTime-i.startTime)/i.duration*100;u.style.width=`${Math.min(100,S)}%`,f.currentTime<i.startTime+i.duration&&g?requestAnimationFrame(F):(g=!1,l.textContent="Play Unit",u.style.width="0%")};F(),setTimeout(()=>{g&&(f.pause(),l.textContent="Play Unit",u.style.width="0%",g=!1)},i.duration*1e3)}},r.appendChild(h),r.appendChild(d),r.appendChild(m),r.appendChild(l),a.appendChild(r)}),e.appendChild(a),e}drawUnitSpectrogram(t,e){const s=t.getContext("2d"),a=e.spectrogramSlices;if(!a||a.length===0)return;const i=t.width/a.length,n=t.height;s.clearRect(0,0,t.width,t.height);let r=1/0,h=-1/0;a.forEach(d=>{d.forEach(m=>{r=Math.min(r,m),h=Math.max(h,m)})}),isFinite(r)||(r=-90),isFinite(h)||(h=-30),a.forEach((d,m)=>{const l=m*i;d.forEach((u,g)=>{const f=(u-r)/(h-r),F=n*(g/d.length),S=n/d.length,C=Math.floor(f*255),v=this.getSpectrogramColor(C);s.fillStyle=v,s.fillRect(l,n-F,i,-S)})})}getSpectrogramColor(t){return t<64?`rgb(0, 0, ${Math.floor(t*4)})`:t<128?`rgb(0, ${Math.floor((t-64)*4)}, 255)`:t<192?`rgb(${Math.floor((t-128)*4)}, 255, ${Math.floor(255-(t-128)*4)})`:`rgb(255, ${Math.floor(255-(t-192)*4)}, 0)`}}document.addEventListener("DOMContentLoaded",()=>{new W});
